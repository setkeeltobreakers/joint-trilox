This file serves to document the basics of the Trilox language, as implimented by the Joint interpreter

* Core Features
** Basics
*** Values
    Trilox is a dynamically typed language with seven basics types of value:
    - Numbers :: Numbers in Trilox are all part of the same type, which is internally a double precision floating point value.
    - Logical :: Uniquely, in Trilox, logical values come in three flavors. True, false, and unknown.
    - Nil :: Trilox contains an explicit representation for a null value.
    - Strings :: Strings in Trilox are first class objects. They automatically interned, and declared using double quotes.
    - Tables :: Tables are collections of values that are accessed via strings. Internally, they are hash tables.
    - Arrays :: Arrays are collections of values accessed via numbers. They, and tables, dynamically grow to accomodate the values placed in them.
    - Functions :: In Trilox, functions are first class values and can be used exactly as any other value.

****** Syntax
#+BEGIN_EXAMPLE
# Numbers
5
5.0
5.6
# Logicals
true
unknown
false
# Nil
nil
# Strings
"Hello world!"
# Tables
:[one : 1, two : 2, three : 3]
table.entry
table:["Calculated_entry"]
# Array
[ 1, 2, 3, 4, 5 ]
array[4]
# Functions
function()
funTwoArgs(1, 2)
#+END_EXAMPLE

*** Expressions and Statements
    Trilox features both expressions and statements as part of its grammer.
    
**** Expressions
     Expressions in trilox come in a variety of flavors.

***** Arithmetic
      Arithmetic operators in Trilox are parsed using infix notation and are right associative.
      There are six arithmetic operators in Trilox. They are as follows:
      - + :: Addition.
      - - :: Subtraction. Can also be used as an prefix operator to negate values.
      - * :: Multiplication.
      - / :: Division. There are no checks for division by 0.
      - % :: Modulo.
      - ^ :: Exponentiation. 

****** Syntax:
#+BEGIN_EXAMPLE
5 + 4 - 3 * 5 / 3 % 20 ^ 2 -> 4
#+END_EXAMPLE

***** Comparisons
      Trilox features the usual list of binary comparison operators that you may expect from other programming languages, along with a ternary 
      comparison operator. For the binary comparison operators, they return true or false when applied normally, but when they are supplied with
      values of different types, for example a string versus a number, they will return unknown. The ternary comparison operator returns false
      if the value before it is "less than" (either in value in the case of numbers, or in the case of strings, arrays, and tables, size) the value
      after it, true if the value before it is "greater than" the value after it, or unknown if they are "equal."

      Comparison operators:
      - compare :: Ternary comparison operator.
      - == :: Equality.
      - < :: Less than.
      - <= :: Less than or equal to.
      - > :: Greater than.
      - >= :: Greater than or equal to.
      - != :: Not equal to.

****** Syntax
#+BEGIN_EXAMPLE
5 < 6 -> true
5 < "6" -> unknown
5 != "6" -> unknown

5 compare 6 -> false
7 compare 6 -> true
6 compare 6 -> unknown
#+END_EXAMPLE
Note: When presented with a logical value, 'compare' evaluates according to the following precedence: false < unknown < true.
      e.g. false compare true -> false, unknown compare false -> true, true compare true -> unknown.

***** Logical operators
      Similarly to how languages with binary logic have Boolean operators, Trilox pairs its ternary logic with Kleene/Priest operators. These KP
      operators are identical to Boolean operators when supplied with only true and false, but when supplied with an unknown value, they behave
      differently. KP operators in Trilox do not short circuit, both input values are calculated independantly and then compared.

      Logical operators:
      - not, ! :: Not
	- Truth Table:
	  | Input   | Output  |
	  | True    | False   |
	  | Unknown | Unknown |
	  | False   | True    |
      - and :: And
	- Truth Table:
	  | Inputs  | True    | Unknown | False |
	  |---------+---------+---------+-------|
	  | True    | True    | Unknown | False |
	  | Unknown | Unknown | Unknown | False |
	  | False   | False   | False   | False |
      - or :: Or
	- Truth Table:
	  | Inputs  | True | Unknown | False   |
	  |---------+------+---------+---------|
	  | True    | True | True    | True    |
	  | Unknown | True | Unknown | Unknown |
	  | False   | True | Unknown | False   |
      - xor :: Xor
	- Truth Table:
	  | Inputs  | True    | Unknown | False   |
	  |---------+---------+---------+---------|
	  | True    | False   | Unknown | True    |
	  | Unknown | Unknown | Unknown | Unknown |
	  | False   | True    | Unknoen | False   |

****** Syntax
#+BEGIN_EXAMPLE
true or false -> true,
true xor unknown -> unknown,
true and true -> true,
not false -> true
#+END_EXAMPLE

**** Statements
     Likewise, Trilox comes with a handful of different statements. Mostly surrounding control flow.

***** Statement boundaries
     In Trilox, statement boundaries are determined principally by newline characters. Some characters or keywords can also act as statment boundaries,
     this includes commas, curly braces, parenthesis, and the end keyword. However, these characters are not consumed by the compiler if they simply 
     mark the end of a statement, but only if they are part of a larger statement/declaration. Essentially, the programmer is not forced to insert
     new lines in situations where there are natural boundaries around statements.
     If the programmer wished to provide explicit statement boundaries without introducing a new line, they can use a semicolon. 

****** Syntax
#+BEGIN_EXAMPLE
5 + 4

{ 5 + 4 }

5 + 4; 4 + 5
#+END_EXAMPLE

***** If
      Building on Trilox' ternary logic system, Trilox also provides three-way control flow via if statements. There are two syntaxes that can be used to 
      construct if statements, both define one expression that is evaluated for a logical result, and three seperate segments of code (in one syntax, each 
      segment is a single statment, in the other, each is a block) one that is executed if the expression evaluated to true, one if it evaluated to unknown,
      and one if it evaluated to false. 
      The first syntax is more simple, but also more restrictive. The three statements are seperated by commas and have predefined locations. The true statement
      is first, the unknown statement is second, and the false statement last. Both the unknown and false statements can be ommitted, either together or 
      individually, but the true statement is mandatory. 
      The second syntax is more complex, but is cleaner when one must place large blocks of code inside if statements. In this, each block is explicitly declared,
      with the condition necessary to executed placed before a colon, and an 'end' keyword to mark the end of the block. The blocks can be placed in any order, 
      and any of them can be ommitted, but having at least one is mandatory.

****** Syntax
#+BEGIN_EXAMPLE
if true or false do 5 + 5, 6 + 6, 7 + 7 # Simple syntax

if unknown and do # Blocking syntax
true:
    12 * 2
end
false:
    5 + 6
end
unknown:
    8 + 4
end
#+END_EXAMPLE
     
***** While
      Similarly to if statements, while statements are also altered from their usual form by taking advantage of Trilox' ternary logic system.
      While statements define a expression that is evaluated for every loop iteration and two statements, one to be executed if the expression evaluates to true
      and the other to be executed if the expression evaluates to unknown. The true statement will be executed every time the loop iterates, but the unknown 
      statement will be executed exactly once before exiting the loop, unless the program explicitly reenters the loop via a continue statement.
      Only the true statement is mandatory, and the unknown statement can be ommitted. 

****** Syntax
#+BEGIN_EXAMPLE
while true or unknown do 5 + 5, 6 + 6
#+END_EXAMPLE

***** Each-In
      Each-in statments are, unlike out previous two examples, pretty much identical to what you would find in other languages with a 'for in' or 'each in' loop.
      Each-in statements define an array, a local variable representing an element in that array, and a statement which will be executed for every element in the
      array. Each-in loops also have a 'hidden' internal counter variable, named 'counter' that is exposed to the user and can be used if an explicit counter is 
      necessary. 

****** Syntax
#+BEGIN_EXAMPLE
each i in [5 4 6 3] do i + counter
#+END_EXAMPLE

***** Blocks
      Trilox supports C-like block syntax using curly braces.
      
      Blocks:
      - { ... } :: Block

****** Syntax:
#+BEGIN_EXAMPLE
if true do {
5 + 5 - 3
true or false
if true do 5^3, 2/2, 25 - 3
}
#+END_EXAMPLE

***** Continue
      The continue statement can be used to skip to jump back to the top of a while loop, or in the case of an each in loop, jump to the next iteration.
      If used inside the unknown statement in a while loop, it will return into the loop for another execution.

****** Syntax
#+BEGIN_EXAMPLE
while true do {
    5 + 5
}, { 
    disp("Something went wrong!") 
    continue
}
#+END_EXAMPLE

***** Consider-When and Switch-Case
      In many languages there are comparison statments in which multiple conditions are compared and multiple blocks are executed based on those
      conditions. Internally, these are implimented either as a linear search in which each condition is individually compared in sequence until a
      match is found, then the correspoding block is executed and the statement exited, or as some kind of search on a jump table in which a specific
      condition is found and then the corresponding block is executed and the statement exited.
      Each of these has their pros and cons. The former allows for more complex conditions to be evaluated, but for simple comparisons the latter is 
      much faster, and its speed generally does not depend on which specific condition is true.
      In Trilox, both are implimented using two different statements. The former is implimented using the consider-when statement, and the latter using
      the switch-case statement. For the switch-case statement, all of the cases must be constant values, they cannot be expressions or variables or 
      function calls. This is because the jump table for each case is calculated at compile time, and so those dynamic values have not been calculated
      yet. For consider-when statements, any expression or constant value is a valid when comparison.
      
      Switch statements support a 'default' statement which is executed if the input matches none of the case entries. Consider statement also support
      an 'else' statement which is executed if none of the when conditions evaluate to true.
      
      For consider statements, each when statement will execute if and only if the corresponding condition evaluates to true. For switch statements, 
      if a non-string value is used as the input, the statement will execute the default statement if there is one, or simple pass through the statement
      if there isn't.

****** Syntax
#+BEGIN_EXAMPLE
consider
    when 5 == 5 do 5 + 5
    when 4 == 5 do 4 + 5

switch "switcher" do
    case "switcher" do 34 / 2
    case "not-switcher" do 43 - 5
    default do 3 * 5
#+END_EXAMPLE

*** TODO Declarations
    Declarations extend the state of a program by defining new variables or functions.

**** DONE Variables
     As previously mentioned, variables in Trilox are dynamically typed. Variables are also lexically scoped, and global variables are late-bound.
     All of this means that any value can be slotted into any variable, variable scoping functions as normal in most languages, and global variables 
     can be referenced (but not accessed) before they are defined. Trilox does not support implicit definition, variables must be explicitly declared
     before they can be used. Variables are implicitly set to nil if no value is set during declaration.

****** Syntax
#+BEGIN_EXAMPLE
var variable = 5

var nilvariable
#+END_EXAMPLE

**** TODO Functions
     Functions come in a couple of different forms in Trilox.

***** Named Functions
      The primary form of function you'll find in Trilox is the named function. Named functions 

****** Syntax
#+BEGIN_EXAMPLE
function exampleFun(arg1, arg2, arg3)
    var outvar
    outvar = arg1 + arg2 - arg3
end(outvar)
#+END_EXAMPLE

***** Anonymous Functions
****** Syntax
#+BEGIN_EXAMPLE
var anonFunc = atom(a, b) (a + b)
#+END_EXAMPLE

**** TODO Tables
     Similarly to functions, tables come in both named and anonymous forms.

***** Named Tables
***** Anonymous Tables
*** TODO Libraries
    Filler
**** TODO Native Libraries
**** TODO Importing Scripts
**** TODO Core Library
